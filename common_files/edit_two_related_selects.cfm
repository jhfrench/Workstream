<!--- 
<fusedoc fuse="common_files/two_related_selects.cfm">
	<responsibilities>
		I am a common file used for two related selects, included as a CFMODULE.
	</responsibilities>	
	<io>
		<in>
		</in>
	</io>
	
	Edits: 	
	$Log$
	Revision 1.0  2006/04/07 18:30:34  csy
	task 42743 Edid customer and engagement fields

	Revision 1.1  2005-06-21 11:01:20-04  french
	Applying style guide. Task 33277

	Revision 1.0  2005-05-26 10:43:11-04  french
	Adding two_related_selects to workstream. Modified code so that it can handle multiple selections for both boxes.


</fusedoc>
--->

<cfsetTING ENABLEcfoutputONLY="YES">

<!--- TAG PARAMETERS --->
<cfparam name="attributes.Query"> 
<cfparam name="attributes.value1_list"> 
<cfparam name="attributes.Display1">
<cfparam name="attributes.Display2">
<cfparam name="attributes.Value1" DEFAULT="#attributes.Display1#">
<cfparam name="attributes.Value2" DEFAULT="#attributes.Display2#">
<cfparam name="attributes.Default1" DEFAULT="(((((none)))))">
<cfparam name="attributes.Default2" DEFAULT="(((((none)))))">
<cfparam name="attributes.Name1" DEFAULT="two_related_selects1">
<cfparam name="attributes.Name2" DEFAULT="two_related_selects2">
<cfparam name="attributes.multiple1" DEFAULT="0">
<cfparam name="attributes.multiple2" DEFAULT="0">
<cfparam name="attributes.Size1" DEFAULT="1">
<cfparam name="attributes.Size2" DEFAULT="1">
<cfparam name="attributes.Width1" DEFAULT="">
<cfparam name="attributes.Width2" DEFAULT="">
<cfparam name="attributes.ForceWidth1" DEFAULT="">
<cfparam name="attributes.ForceWidth2" DEFAULT="">
<cfparam name="attributes.ForceWidthChar" DEFAULT="&nbsp;">
<cfparam name="attributes.EmptyText1" DEFAULT="">
<cfparam name="attributes.EmptyText2" DEFAULT="">
<cfparam name="attributes.Message1" DEFAULT="You must choose an option for #attributes.Name1#.">
<cfparam name="attributes.Message2" DEFAULT="You must choose an option for #attributes.Name2#.">
<cfparam name="attributes.FormName" DEFAULT="forms[0]">
<cfparam name="attributes.HTMLBetween" DEFAULT="">
<cfparam name="attributes.OnChange" DEFAULT="">
<cfparam name="attributes.ExtraOptions2" DEFAULT="#IIF((attributes.EmptyText1 EQ "") AND (attributes.Size2 EQ 1), 0, 5)#">
<cfparam name="attributes.AutoSelectFirst" DEFAULT="Yes">
<cfparam name="attributes.Element1_OnchangeEvent" DEFAULT="">

<cfset FunctionName = ReplaceList(attributes.FormName, "[,]", ",") & attributes.Name1 & "ChangeMenu()">

<!--- "MAGIC" SHORTCUTS FOR THE ONCHANGE HANDLER --->
<cfif attributes.OnChange is "Jump!">
  <cfset attributes.OnChange = "document.location = this.options[selectedIndex].value;">
<CFELSEIF attributes.OnChange is "Submit!">
  <cfset attributes.OnChange = "this.form.submit();">
</cfif>



<!--- USE PASSED QUERY WITHIN THIS CODE AS "MyQuery" --->
<cfset MyQuery = Evaluate("Caller.#attributes.Query#")>


<!--- BEGIN JAVASCRIPTING --->
<cfoutput>
	<SCRIPT LANGUAGE="JavaScript1.1">
	  // javascript code generated by the CF_two_related_selects Cold Fusion tag (Nate Weiss, 4/00)
		// loosely adapted from Nick Heinle's code originally at http://webreference.com/javascript/960902/select_boxes.html
	  var maxlength = 10;
	  OneA = new Array;

		var trueLength = OneA.length;  
		var lst = OneA.length;              

    function require_#attributes.Name1#() {
		  with (document.#attributes.FormName#.#attributes.Name1#) {
			  RetVal = true;
			  if (options[selectedIndex] == null) RetVal = false;
				  else RetVal = !(options[selectedIndex].value == '');
			  if (!RetVal) alert('#attributes.Message1#');
				return RetVal
			}
		}

    function require_#attributes.Name2#() {
		  with (document.#attributes.FormName#.#attributes.Name2#) {
			  RetVal = true;
			  if (options[selectedIndex] == null) RetVal = false;
				  else RetVal = !(options[selectedIndex].value == '');
			  if (!RetVal) alert('#attributes.Message2#');
				return RetVal
			}
		}
		
		function require_#attributes.Name1#And#attributes.Name2#() {
		  return ((require_#attributes.Name1#()) && (require_#attributes.Name2#()));
		}
		
				
	function #FunctionName# {
		OneA.length = 0;
		menuNum = document.#attributes.FormName#.#attributes.Name1#.selectedIndex;
		if (menuNum == null) return;  
		#attributes.Name1#NewOpt = new Array();
		#attributes.Name1#NewVal = new Array();
       <!--- this function gets continued in the next cfoutput section --->
</cfoutput>


<!--- COUNTER VARIABLE WILL HOLD NUMBER OF GROUPS (OPTIONS IN FIRST SELECT) --->
<cfset Counter = IIF(attributes.EmptyText1 is not "", 1, 0)>

<!--- CREATE AN "IF" STATEMENT THAT COVERS EACH ITEM IN THE FIRST SELECT BOX --->
<!--- WITHIN THE "IF" STATMENT, PRE-POPULATE ARRAY WITH CORRESPONDING ITEMS FOR SECOND SELECT  --->
<cfset variables.counter2=0>
<cfoutput QUERY="MyQuery" GROUP="#attributes.Display1#">
	
	if (document.#attributes.FormName#.#attributes.Name1#[#counter#].selected == true) {
	<cfoutput>
		<cfif len(attributes.EmptyText2)>#attributes.Name1#NewOpt[0] = new Option("#attributes.EmptyText2#", "");</cfif>
		#attributes.Name1#NewOpt[#variables.counter2#] = new Option("#ReplaceList(MyQuery[attributes.Display2][MyQuery.CurrentRow], "\,#Chr(9)#,#Chr(13)##Chr(10)#,',"",#Chr(13)#,#Chr(10)#",  "\\,\t,\n,\',\"",\r,\f")#", "#ReplaceList(MyQuery[attributes.Value2][MyQuery.CurrentRow], "\,#Chr(9)#,#Chr(13)##Chr(10)#,',"",#Chr(13)#,#Chr(10)#",  "\\,\t,\n,\',\"",\r,\f")#"); <cfset variables.counter2 = variables.counter2 + 1></cfoutput>
	} <cfset variables.counter = variables.counter + 1>
</cfoutput>


<!--- finish up the ChangeMenu() function --->
<cfoutput>
<!--- empty second box --->
lst = document.#attributes.FormName#.#attributes.Name2#.options.length;
for (i = lst; i > 0; i--) {
	document.#attributes.FormName#.#attributes.Name2#.options[i] = null;
}

<!--- now populate second box --->
#attributes.Name1#NewOpt.sort();
#attributes.Name1#NewOpt.sort();
tot = #attributes.Name1#NewOpt.length;
for (i = 0; i < tot; i++) {
	if (#attributes.Name1#NewOpt[i]!=undefined) {
		document.#attributes.FormName#.#attributes.Name2#.options[i] = #attributes.Name1#NewOpt[i];
	}
	else {
		break;
	}
}

<cfif NOT comparenocase(attributes.AutoSelectFirst, "Yes")>
	document.#attributes.FormName#.#attributes.Name2#.options[0].selected = true;
</cfif>
}
</SCRIPT>
</cfoutput>
<!--- DONE WITH JAVASCRIPTING.  NOW WE JUST HAVE TO DISPLAY THE FORM ELEMENTS --->


<!--- ALLOW FOR AUTO-SIZING "SHORTCUT" OF SELECT BOXES --->
<cfif NOT comparenocase(attributes.Size1, "Auto")>
  <!--- MAKE THE FIRST SELECT BE BIG ENOUGH FOR ALL OF ITS OPTIONS --->
  <cfset attributes.Size1 = Counter>
</cfif>
<cfif NOT comparenocase(attributes.Size2, "Auto")>
  <!--- MAKE THE SECOND SELECT BE THE SAME SIZE AS THE FIRST --->
  <cfset attributes.Size2 = attributes.Size1>
</cfif>


<!--- OUTPUT FIRST SELECT BOX --->
<cfoutput><select name="#attributes.name1#" onchange="#functionname#;#attributes.element1_onchangeevent#" size="#attributes.size1#" <cfif len(attributes.width1)>style="width:#attributes.width1#"</cfif> class="RegText#session.workstream_text_size#"<cfif attributes.multiple1> multiple</cfif><cfif len(attributes.Element1_OnchangeEvent)> onchange="javascript:#attributes.Element1_OnchangeEvent#"</cfif>></cfoutput>
	<!--- special first item, if requested --->
	<cfif len(attributes.emptytext1)><cfoutput><option value="">#attributes.emptytext1#</option></cfoutput></cfif>
	<!--- generate remaining items from query --->
	<cfoutput query="myquery" group="#attributes.display1#"><option value="#myquery[attributes.value1][myquery.currentrow]#" <cfif ListFind(attributes.value1_list,myquery[attributes.value1][myquery.currentrow],",")>selected</cfif> >#myquery[attributes.display1][myquery.currentrow]#</option></cfoutput>
	
  <!--- "FORCE WIDTH" OPTION AT BOTTOM, IF REQUESTED --->
	<cfif len(attributes.ForceWidth1)><cfoutput><OPTION value="">#RepeatString(attributes.ForceWidthChar, attributes.ForceWidth1)#</option></cfoutput></cfif>
<cfoutput></SELECT></cfoutput>


<!--- INSERT ANY REQUESTED HTML BETWEEN THE TWO SELECT BOXES --->
<cfoutput>#attributes.HTMLBetween#</cfoutput>

<!--- OUTPUT SECOND SELECT BOX --->
<cfoutput><SELECT name="#attributes.Name2#" SIZE="#attributes.Size2#" <cfif len(attributes.onChange)>onChange="#attributes.OnChange#"</cfif> <cfif len(attributes.Width2)>STYLE="width:#attributes.Width2#"</cfif> class="RegText#session.workstream_text_size#"<cfif attributes.multiple2> multiple</cfif>></cfoutput>
	<!--- SPECIAL FIRST ITEM, IF REQUESTED --->
	<cfif len(attributes.EmptyText2)><cfoutput><OPTION value="">#attributes.EmptyText2#</option></cfoutput></cfif>
	
	<!--- GENERATE REMAINING ITEMS FROM QUERY --->
	<!--- WE ONLY NEED TO OUTPUT THE CHOICES FOR THE FIRST GROUP --->
	
	
		   <cfif NOT len(attributes.EmptyText1)>
		   <cfloop QUERY="MyQuery">
			<cfif ListFind(attributes.value1_list,myquery[attributes.value1][myquery.currentrow],",")>
			  <cfoutput>
			  <OPTION value="#MyQuery[attributes.Value2][MyQuery.CurrentRow]#" <cfif  ListFind(attributes.value2_list,myquery[attributes.value2][myquery.currentrow],",")>SELECTED</cfif>>#MyQuery[attributes.Display2][MyQuery.CurrentRow]#</option></cfoutput>
		    </cfif>
			</cfloop>
		</cfif>
	

  <cfif Val(attributes.ExtraOptions2) GT 0>
    <cfloop FROM="1" TO="#Val(attributes.ExtraOptions2)#" INDEX="i">
      <cfoutput><OPTION value=""></option></cfoutput>
    </cfloop>
  </cfif>
  
  <!--- "FORCE WIDTH" OPTION AT BOTTOM, IF REQUESTED --->
	<cfif len(attributes.ForceWidth2)><cfoutput><option value="">#RepeatString(attributes.ForceWidthChar, attributes.ForceWidth2)#</option></cfoutput></cfif>
<cfoutput></SELECT></cfoutput>


<cfsetTING ENABLEcfoutputONLY="NO">